#+TITLE: Hodgekin Huxley

* Introduction
This tutorial is adapted from [[https://github.com/openworm/hodgkin_huxley_tutorial][here]] and shows how to use Arbor to run existing
NML2 simulations.

* Setup
We are going to set up a directory structure that contains all the tools we need
#+begin_example
+-- tutorial/
 \
  +-- hodgkin_huxley_tutorial/      # NML2 tutorial
  +-- nmlcc/                        # nml2mod compiler
  +-- cat/{naChan.mod, kChan.mod}   # catalogue
  +-- hh-tutorial/                  # python virtual env
  +-- arbor.py                      # script to run simulation
#+end_example
First, setup and enter the top-level directory that you want to use; here, we
assume =tutorial=. First, nstall Arbor via pip into a virtual env
#+begin_src bash
python -mvenv hh-tutorial
source hh-tutorial/bin/activate
pip install arbor==0.6
#+end_src
Clone the original tutorial
#+begin_src bash
git clone https://github.com/openworm/hodgkin_huxley_tutorial/
#+end_src
Obtain nmlcc (keep a rust installation ready)
#+begin_src bash
git clone https://github.com/thorstenhater/nmlcc
#+end_src

* Prepare Channel Models

Compile channel definitions to NMODL leaving only the required parameters, using
these commands
#+begin_src bash
cd nmlcc
cargo run -- nmodl --parameters="-*" --type=ionChannel ../hodgkin_huxley_tutorial/Tutorial/Source/naChan.channel.nml
cargo run -- nmodl --parameters="-*"  --type=ionChannel  ../hodgkin_huxley_tutorial/Tutorial/Source/kChan.channel.nml
#+end_src
Then, we extract the parameter and mechanism assignments like this
#+begin_src bash
cargo run -- acc ../hodgkin_huxley_tutorial/Tutorial/Source/hhcell.cell.nml
#+end_src

Move to a directory and build an Arbor catalogue
#+begin_src bash
cd ..
mkdir cat
mv nmlcc/kChan.mod cat/
mv nmlcc/naChan.mod cat/
arbor-build-catalogue hh cat/
#+end_src

* Compose a Python Script for Simulation

Now we are going to lift the parameters from various NML2 files located under
~hodgkin_huxley_tutorial/Tutorial/Source/~ into a Python script to run a
simulation with Arbor

- =LEMS_HH_Simulation.xml= :: (LEMS) duration and time step
- =hhcell.cell.nml= ::
  - channel densities, membrane properties, axial resisvity
  - ion properties
  - morphology, will be read by Arbor, but note cell's id (=hhcell=)
- =HHCellNetwork.net.nml= :: stimuli
