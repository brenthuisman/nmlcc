#+TITLE: Readme

* Introduction

Compile NML2 definitions to Arbor NMODL. The ~nmlcc~ tool will consume a list of
LEMS files containing NML2 conformant ~ComponentType~ definitions and a NeuroML2
file (~.nml~). By default the following definitions are used
- NML2 :: ~v2-dev~ + XSD ~v2.2~
- LEMS :: XSD ~v0.7.6~

** Current Limitations

- units will not be treated completly, rather upon seeing a quantity, it will be
  converted to a 'blessed' unit for that dimension, eg ~1 m~ will become ~100
  cm~ internally. This can have some consequences for accuracy.

* Setup

- Clone this repo
- Now try an example
  #+begin_src shell
  cargo run -- nmodl --type ionChannelHH example/nml-simple-ion-channels.xml
  #+end_src
  Here, this should generate ~NaConductance.mod~
- Get help
  #+begin_src shell
  cargo run -- -h
  #+end_src

* Usage

- =nmlcc nmodl <input.nml>= generates NMODL files that can be compiled into Arbor catalogues
  - =--type=<ct>= :: (required) will choose a =ComponentType= named =ct= from
    which the =.mod= files will be built
  - =--parameter=+p,-q,..= :: will choose parameters to retain as tweakable
    - can _end_ on wildcard =*= to select all suffixes
      - a wildcard anywhere else will be considered a literal =*= character
    - must be ordered from least to most specific, ie =foo_bar_*= must come _after_ =foo_*=
    - if not given, all will be retained (default =+*=)
  - example :: Export a simple exponential synapse
    #+begin_src shell
    nmlcc nmodl --type=expOneSynapes --parameter='-*,+erev,+gbase' example/nml-simple-synapse.xml
    #+end_src
- =nmlcc acc <input.nml>= extracts a Arbor Cable Cell description based on the
  =biophysicalProperties=
  - =--cell=<id>= :: (required) selects a cell for export
  - example :: Fetch parameter assignment from a simple cell model
    #+begin_src shell
    nmlcc acc --cell --parameter='+erev,+gbase' example/nml-hh-cell.nml
    #+end_src

* Bootstraping the Compiler

This project comes with a pre-built data model in =src/lems/raw.rs= and
=src/neuroml/raw.rs=. If you change the underlying LEMS/NML2 definitions or edit
=src/schema.rs= you'll need to rebuild the data model by running this command
#+begin_src shell
cargo run --bin schema
#+end_src
This will allow for tweaking the versions of the NML2/LEMS schemata or adjusting
them by hand.

The default state is produced by this script
#+begin_src shell
bash bootstrap.sh
#+end_src
which will
- bring in the LEMS and NML2 schemata
- (and *remove them* if present)
- slightly modify both of them
- build the data model from the schemata
