#+TITLE: Readme

* Introduction

Compile NML2 definitions to Arbor NMODL. The ~nmlcc~ tool will consume a list of
LEMS files containing NML2 conformant ~ComponentType~ definitions and a NeuroML2
file (~.nml~). By default the following definitions are used
- NML  :: ~v2-dev~ + XSD ~v2.2~
- LEMS :: XSD ~v0.7.6~

** Current Limitations

- only export to NMODL (in Arbor's dialect) is supported via the ~nmodl~ sub-command.
- units will not be treated completly, rather upon seeing a quantity, it will be
  converted to a 'blessed' unit for that dimension, eg ~1 m~ will become ~100
  cm~ internally. This can have some consequences for accuracy.

* Setup

- Clone recursively
- Patch XSD, see below
- Build data model
  #+begin_src shell
  cargo run --bin schema
  #+end_src
- Now try an example
  #+begin_src shell
  cargo run -- nmodl --type ionChannelHH example/nml-simple-ion-channels.xml
  #+end_src
  Here, this should generate ~NaConductance.mod~
- Get help
  #+begin_src shell
  cargo run -- -h
  #+end_src

* Usage
- ~nmlcc nmodl~ generates NMODL files that can be compiled into Arbor catalogues
  - ~--type=T~ :: (required) will choose a ~ComponentType~ from which the ~.mod~ files will be built
  - ~--parameter=+p,-q,..~ :: will choose parameters to retain as tweakable
    - can _end_ on wildcard ~*~ to select all suffixes
    - must be ordered from least to most specific, ie ~foo_bar_*~ must come _after_ ~foo_*~
    - if not given, all will be retained (default ~+*~)

* Patches
** NML2
This wreaks havoc and is deprecated anyhow, so remove it.
#+begin_example
diff --git a/Schemas/NeuroML2/NeuroML_v2.2.xsd b/Schemas/NeuroML2/NeuroML_v2.2.xsd
index 85d7be9..6eea36f 100644
--- a/Schemas/NeuroML2/NeuroML_v2.2.xsd
+++ b/Schemas/NeuroML2/NeuroML_v2.2.xsd
@@ -2146,21 +2146,6 @@

     </xs:complexType>

-
-
-
-    <!-- TODO: remove -->
-    <xs:complexType name="ConcentrationModel_D">
-
-        <xs:complexContent>
-            <xs:extension base="DecayingPoolConcentrationModel">
-
-                <xs:attribute name="type" use="required" fixed="decayingPoolConcentrationModel"/>
-
-            </xs:extension>
-        </xs:complexContent>
-    </xs:complexType>
-
     <xs:complexType name="IntracellularProperties">

         <xs:sequence>
#+end_example

** LEMS

This is purely my lazyness ;) Essentially change ~element~ to ~ComplexType~ here.
#+begin_example
diff --git a/Schemas/LEMS/LEMS_v0.7.6.xsd b/Schemas/LEMS/LEMS_v0.7.6.xsd
index 3843c9c..98c5cd6 100644
--- a/Schemas/LEMS/LEMS_v0.7.6.xsd
+++ b/Schemas/LEMS/LEMS_v0.7.6.xsd
@@ -27,33 +27,24 @@
     elementFormDefault="qualified"
     attributeFormDefault="unqualified">

-    <xs:element name="Lems">
+    <xs:complexType name="Lems">
         <xs:annotation>
             <xs:documentation>The root Lems element.</xs:documentation>
         </xs:annotation>

-        <xs:complexType>
-
-            <xs:sequence>
-                <xs:element name="Target" type="Target" minOccurs="0" maxOccurs="1"/>
-                <xs:element name="Include" type="Include" minOccurs="0" maxOccurs="unbounded"/>
-                <xs:element name="Dimension" type="Dimension" minOccurs="0" maxOccurs="unbounded"/>
-                <xs:element name="Unit" type="Unit" minOccurs="0" maxOccurs="unbounded"/>
-                <xs:element name="Constant" type="Constant" minOccurs="0" maxOccurs="unbounded"/>
-                <xs:element name="ComponentType" type="ComponentType" minOccurs="0" maxOccurs="unbounded"/>
-                <xs:element name="Component" type="Component" minOccurs="0" maxOccurs="unbounded"/>
-            </xs:sequence>
-
-            <xs:attribute name="description" type="xs:string" use="optional"/>
-
-        </xs:complexType>
+        <xs:sequence>
+            <xs:element name="Target" type="Target" minOccurs="0" maxOccurs="1"/>
+            <xs:element name="Include" type="Include" minOccurs="0" maxOccurs="unbounded"/>
+            <xs:element name="Dimension" type="Dimension" minOccurs="0" maxOccurs="unbounded"/>
+            <xs:element name="Unit" type="Unit" minOccurs="0" maxOccurs="unbounded"/>
+            <xs:element name="Constant" type="Constant" minOccurs="0" maxOccurs="unbounded"/>
+            <xs:element name="ComponentType" type="ComponentType" minOccurs="0" maxOccurs="unbounded"/>
+            <xs:element name="Component" type="Component" minOccurs="0" maxOccurs="unbounded"/>
+        </xs:sequence>

-        <!--<xs:unique name="dimension_uniqueness">
-               <xs:selector xpath="Dimension"></xs:selector>
-               <xs:field xpath="@name"></xs:field>
-        </xs:unique>-->
+        <xs:attribute name="description" type="xs:string" use="optional"/>

-    </xs:element>
+    </xs:complexType>
#+end_example
